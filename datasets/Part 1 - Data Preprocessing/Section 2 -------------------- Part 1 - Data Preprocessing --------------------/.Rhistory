A = rbind(c(1,1,2),c(2,4,-3),c(3,6,-5))
b = c(9,1,0)
AB = cbind(A,b)
AB
solve(A,b)
solution = solve(A,b)
A%*%solution
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
AB = cbind(A,b)
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
AB = cbind(A,b)
showEqn(A, b)
install.packages("matlib")
library(matlib)
library('matlib')
library(matlib)
install.packages("matlib")
library(matlib)
knitr::opts_chunk$set(echo = TRUE, comment = NA, engine.path = list(
octave = '/Applications/Octave-4.4.1.app/Contents/Resources/usr/bin/octave'
))
library(reticulate)
library(matlib)
install.packages("matlib")
install.packages("matlib", dependencies = TRUE)
library(matlib)
install.packages("matlib")
install.packages("rgl")
install.packages("rgl")
install.packages("matlib", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("rgl")
install.packages("rgl", dependencies = TRUE)
library(matlib)
install.packages("matlib", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("car", dependencies = TRUE)
install.packages("car", dependencies=TRUE)
install.packages("car", dependencies=TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("car", dependencies=TRUE)
install.packages("car", dependencies=TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("rio", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("webutils", dependencies = TRUE)
install.packages("~/Descargas/matlib_0.9.2.tar.gz", repos = NULL, type = "source")
install.packages("matlib")
install.packages("matlib")
install.packages("RCurl")
install.packages("~/Descargas/RCurl_1.95-4.12.tar.gz", repos = NULL, type = "source")
install.packages("~/Descargas/RCurl_1.95-4.12.tar.gz", repos = NULL, type = "source")
install.packages("matlib")
install.packages("matlib", dependencies = TRUE)
library(foreign)
detach("package:foreign", unload = TRUE)
remove.packages("foreign", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remove.packages("foreign", lib="/usr/lib/R/library")
remove.packages("foreign", lib="/usr/lib/R/library")
install.packages("matlib", dependencies = TRUE)
remove.packages("MASS", lib="/usr/lib/R/library")
remove.packages("MASS", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("matlib", dependencies = TRUE)
library(matlib)
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
showEqn(A, b)
plotEqn()
plotEqn(A)
plotEqn(A,b)
A = rbind(c(4,2),c(1,-2),c(3,4))
b = c(3,2,1)
showEqn(A,b)
showEqn(A, b)
plotEqn(A,b)
A = rbind(c(1,1,2),c(2,4,-3),c(3,6,-5))
b = c(9,1,0)
showEqn(A,b)
plotEqn(A,b)
plotEqn3d(A,b)
AB = cbind(A,b)
echelon(AB)
echelon(AB, verbose = TRUE)
echelon(AB, verbose = TRUE, fractions = TRUE)
A = matrix(c(1,1,-1,1,-1,1,3,1,-1), byrow = TRUE, nrow = 3, ncol = 3)
b = c(2,1,5)
b = c(2,1,5)
AB = cbind(A,b)
Solve(A,b, fractions = TRUE)
plotEqn3d(A,b, xlim = c(-10,10), ylim = c(-10,10), zlim = c(-10,10))
Solve(A,b, fractions = TRUE)
A = cbind(c(1,1,2),c(1,-1,1))
b = c(2,1,3)
AB = cbind(A,b)
Solve(A,b, fractions = TRUE)
plotEqn3d(A,b, xlim = c(-10,10), ylim = c(-10,10), zlim = c(-10,10))
plotEqn(A,b, xlim = c(0,2), ylim = c(0,1.5))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE, comment = NA, engine.path = list(
octave = '/usr/bin/octave'
))
A = cbind(c(1,1,1),c(0,2,2),c(0,1,2))
A
A = matrix(c(1,1,1,0,2,2,0,1,2), ncol = 3, nrow = 3, byrow = TRUE)
A
A = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
A
det(A)
inv(A)
solve(A)
A.inversa = solve(A)
A**A.inversa
A**A.inversa
A%*%A.inversa
echelon(A)
echelon(A)
echelon(A)
library(matlib)
echelon(A)
A
echelon(A)
echelon(A, verbose = TRUE)
A = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
U = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
L1 = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
L2 = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
A = matrix(c(1,1,1,
0,2,2,
0,1,2),
ncol = 3, nrow = 3, byrow = TRUE)
U = matrix(c(1,1,1,
0,1,1,
0,0,1),
ncol = 3, nrow = 3, byrow = TRUE)
L1 = matrix(c(1,0,0,
0,1/2,0,
0,0,1),
ncol = 3, nrow = 3, byrow = TRUE)
L2 = matrix(c(1,0,0,
0,1,0,
0,-1,1),
ncol = 3, nrow = 3, byrow = TRUE)
A
U
L1
L2
L1%*%L2%*%A
L1%*%L2%*%U
solve(L1)%*%solve(L2)%*%U
solve(L1)%*%solve(L2)
b = rbind(1,2,3)
b
solve(A,b)
Ab = rbind(A,b)
Ab = A+b
A
solve(A,b)
L = L1%*%L2
solve(L,b)
L
L1
L = solve(L1)%*%solve(L2)
L
U
solve(U,b)
L%*%solve(U,b)
L.nose = matrix(c(1,1,1,
0,1,1,
0,0,1),
ncol = 3, nrow = 3, byrow = TRUE)
Y.nose = matrix(c(1,1,1,
0,1,1,
0,0,1),
ncol = 3, nrow = 3, byrow = TRUE)
Y = matrix(c(1,1,1,
0,1,1,
0,0,1),
ncol = 3, nrow = 3, byrow = TRUE)
L%*%Y
L%*%solve(L,b)
L%*%solve(U,b)
solve(L,b)
L
solve(L,b)
Y = rbind(1,1,2)
A = rbind(c(1,3,0,-1), c(2,1,-1,5), c(0,-2,3,-1), c(1,1,3,1))
luA = LU(A)
liA
luA
A = rbind(c(0,1,3), c(1,3,-2), c(-3,-2,-1))
b = c(1,3,-2)
sistema = LU(A,b)
A = rbind(c(0,1,3), c(1,3,-2), c(-3,-2,-1))
b = c(1,3,-2)
sistema = LU(A,b)
sistema
A = rbind(c(3,3),c(3,3))
eigen(A)
A = rbind(c(0,0,1/2),c(1,0,-2),c(0,1,5/2))
eigen(A)
A
A = cbind(c(0,0,1/2),c(1,0,-2),c(0,1,5/2))
A
eigen(A)
A = rbind(c(2.5,1.5),c(1.5,2.5))
A
eigen(A)
A = cbind(c(3,-1),c(-2,2))
A
eigen(A)
P1 = eigen(A)[1]
P1
P1 = eigen(A)[0]
P1
P1 = eigen(A)[2]
P1
A = cbind(c(1,1),c(2,-1))
A
B = cbind(c(1,1),c(-1,1))
B
P1 = cbind(c(1,1),c(2,-1))
P1
P2 = cbind(c(1,1),c(-1,1))
P2
P1%*%solve(P2)
solve(P2)
P1 = cbind(c(1,1),c(-2,1))
P1
P2 = cbind(c(1,1),c(-1,1))
P2
P1%*%solve(P2)
P2 = cbind(c(1,-1),c(1,1))
P2
P1%*%solve(P2)
P1
P2
P1 = cbind(c(1,-1),c(-1,1))
P1
P2 = cbind(c(1,1),c(-2,1))
P2
P1%*%solve(P2)
P1
P2
P1 = cbind(c(1,-1),c(1,1))
P1
P2 = cbind(c(1,1),c(-2,1))
P2
P1%*%solve(P2)
S = P1%*%solve(P2)
solve(S)
B = cbind(c(3,-1),c(-2,2))
S%*%B%*%solve(S)
P1 = rbind(c(0,0,-3),c(1,0,-1),c(-2,1,-1))
A
A = rbind(c(0,0,-3),c(1,0,-1),c(-2,1,-1))
A
eigen(A)
dataset
# Plantilla para el pre procesado de datos
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset
setwd("~/Escritorio/2020/machinelearning-az/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset
dataset$Purchased = factor(dataset$Purchased,
levels = c("Yes","No"),
labels = c(1,0))
dataset
A = rbind(c(1,1,3),c(1,3,1),c(3,1,1))
eigen(A)
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
eigen(A)
autoVectores = eigen(A)[2]
autoVectores
View(autoVectores)
View(autoVectores)
autoVectores[6]
autoVectores[3]
autoVectores[2,1]
autoVectores[2]
autoVectores[1]
autoVectores[1][1,1]
library('MASS')
as.fractions(autoVectores)
autoVectores = matrix(eigen(A)[2], byrow = TRUE)
autoVectores[1]
as.fractions(autoVectores)
autoVectores[1]
autoVectores = matrix(eigen(A)[2], byrow = TRUE)
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
autoVectores = matrix(eigen(A)[2], byrow = TRUE)
autoVectores = eigen(A)[2]
autoVectores
autoVectores = unlist(eigen(A)[2])
autoVectores
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
autoVectores = matrix(unlist(eigen(A)[2]), byrow=TRUE, nrow = 3)
autoVectores
autoVectores[1,1]
as.fractions(autoVectores)
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
eigenA = eigen(A)
eigenA[1]
autoVectores = matrix(unlist(eigenA[2]), byrow=TRUE, nrow = 3)
as.fractions(autoVectores)
solve(autoVectores)
as.fractions(solve(autoVectores))
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
eigenA = eigen(A)
eigenA[1]
autoVectores = matrix(unlist(eigenA[2]), byrow=TRUE, nrow = 3)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
unlist(eigenA[2]
unlist(eigenA[2])
unlist(eigenA[2])
A = rbind(c(-2,-36,0),c(-36,-23,0),c(0,0,3))
A
eigenA = eigen(A)
eigenA[1]
autoVectores = matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 3)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
A = rbind(c(2,0,1,0),c(0,2,0,1),c(1,0,2,0),c(0,1,0,2))
A
eigenA = eigen(A)
eigenA[1]
autoVectores = matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 4)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
eigenA[2]
autoVectores = matrix(round(unlist(eigenA[2]),3), byrow=FALSE, nrow = 4)
as.fractions(autoVectores)
autoVectores = matrix(round(unlist(eigenA[2]),2), byrow=FALSE, nrow = 4)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
autoVectores = matrix(unlist(eigenA[2])), byrow=FALSE, nrow = 4)
autoVectores = matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 4)
eigenA[2]
autoVectores = matrix(round(unlist(eigenA[2]),1), byrow=FALSE, nrow = 4)
as.fractions(autoVectores)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
autoVectores = matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 4)
as.fractions(autoVectores)
as.fractions(solve(autoVectores))
eigenA[2]
A = rbind(c(2,0,1,0),c(0,2,0,1),c(1,0,2,0),c(0,1,0,2))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
A = rbind(c(2,0,1,0),c(0,2,0,1),c(1,0,2,0),c(0,1,0,2))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
solve(eigenA[2])
solve( matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 4))
A = rbind(c(0,1i),c(1i,0))
A
eigenA = eigen(A)
eigenA[1]
A = rbind(c(0,1i),c(-1i,0))
A
eigenA = eigen(A)
eigenA[1]
autoVectores = matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 2)
as.fractions(autoVectores)
eigenA[2]
A = rbind(c(0,1i,0),c(-1i,0,0),c(0,0,1))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
A
A = rbind(c(1,1i,0),c(-1i,0,0),c(0,0,1))
A
A = rbind(c(1,1i,0),c(-1i,1,0),c(0,0,1))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
A = rbind(c(1,-1),c(1,1))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
A = rbind(c(0,-1,0),c(1,0,0),c(0,0,1))
A
eigenA = eigen(A)
eigenA[1]
eigenA[2]
solve( matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 2))
eigenA[2]
solve( matrix(unlist(eigenA[2]), byrow=FALSE, nrow = 3))
eigenA[1]
dataset
library(caTools)
?sample.split()
set.seed(123) # seteo una semilla para el randon
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
testing_set = subtet(dataset, split == FALSE)
testing_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
training_set[:,2:3] = scale(training_set[:,2:3])
testing_set[:,2:3] = scale(testing_set[:,2:3])
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(testing_set)
View(testing_set)
